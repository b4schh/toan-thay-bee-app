// api.js
import axios from 'axios';
import Config from 'react-native-config';
import applyRequestInterceptor from './requestInterceptor';
import applyResponseInterceptor from './responseInterceptor';

// C·∫•u h√¨nh retry
const RETRY_CONFIG = {
  maxRetries: 3,
  retryDelay: 1000,
  retryableStatuses: [408, 429, 500, 502, 503, 504, -1], // -1 cho ECONNRESET
};

// Helper function ƒë·ªÉ delay
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c ƒë·∫∑t baseURL m·∫∑c ƒë·ªãnh ph√π h·ª£p v·ªõi backend c·ªßa b·∫°n
const baseURL = 'http://localhost:3000/api';

const api = axios.create({
  baseURL,
  timeout: 10000,
});

console.log(
  'üöÄ Axios Instance cho Mobile ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v·ªõi baseURL:',
  baseURL,
);

// Th√™m interceptor ƒë·ªÉ x·ª≠ l√Ω retry
api.interceptors.response.use(
  response => response,
  async error => {
    const { config } = error;
    
    // Kh√¥ng retry n·∫øu kh√¥ng c√≥ config ho·∫∑c ƒë√£ ƒë·∫°t gi·ªõi h·∫°n retry
    if (!config || config.retryCount >= RETRY_CONFIG.maxRetries) {
      return Promise.reject(error);
    }

    // Kh·ªüi t·∫°o s·ªë l·∫ßn retry
    config.retryCount = config.retryCount || 0;

    // Ki·ªÉm tra ƒëi·ªÅu ki·ªán retry
    const shouldRetry = error.code === 'ECONNRESET' || 
                       RETRY_CONFIG.retryableStatuses.includes(error.response?.status);

    if (shouldRetry) {
      config.retryCount += 1;
      console.log(`üîÑ ƒêang th·ª≠ l·∫°i l·∫ßn ${config.retryCount}/${RETRY_CONFIG.maxRetries} cho request: ${config.url}`);
      
      // Delay tr∆∞·ªõc khi retry
      await delay(RETRY_CONFIG.retryDelay);
      
      // Th·ª±c hi·ªán request l·∫°i
      return api(config);
    }

    return Promise.reject(error);
  }
);

// √Åp d·ª•ng interceptor n·∫øu b·∫°n c·∫ßn x·ª≠ l√Ω c√°c y√™u c·∫ßu/ph·∫£n h·ªìi chung
applyRequestInterceptor(api);
applyResponseInterceptor(api);

export default api;